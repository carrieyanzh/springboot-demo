pipeline {
    agent { label 'docker && raspberrypi' }   
    
    parameters {
        // Method 1: Choose which Jenkinsfile to use
        choice(
            name: 'PIPELINE_TYPE',
            choices: [
                'development',
                'staging', 
                'production',
                'testing',
                'custom'
            ],
            description: 'Select which pipeline configuration to use'
        )
        
        string(
            name: 'CUSTOM_JENKINSFILE',
            defaultValue: 'Jenkinsfile',
            description: 'Custom Jenkinsfile name (used when "custom" is selected)'
        )
        
        string(
            name: 'BRANCH_NAME',
            defaultValue: 'main',
            description: 'Branch to build'
        )
        
        string(
            name: 'REPO_URL',
            defaultValue: 'https://github.com/your-org/your-repo.git',
            description: 'Repository URL'
        )
    }
//stage('Checkout') {
        //    steps {
        //        // Checkout the specified branch from repository
        //       checkout([
        //            $class: 'GitSCM',
        //            branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
        //            // Clone with depth 1 for faster checkout (shallow clone)
        //            extensions: [[$class: 'CloneOption', depth: 1, shallow: true]],
        //            //userRemoteConfigs: [[url: 'https://github.com/your-org/repo.git']]
        //        ])
        //    }
        //}

        stages {
            stage('Checkout') {
                steps {
                    // Use branch or user-specific directory
                   // checkout scm
                   // script {
                   //     env.WORKSPACE_DIR = "${env.WORKSPACE}/${env.BUILD_NUMBER}"
                   // }
                    echo "workspace ${env.WORKSPACE}/${env.BUILD_NUMBER}"
                }
            }
            stage('Build') {
                steps {
                   // dir("${env.WORKSPACE_DIR}") {
                   //     sh 'mvn clean compile'
                   // }
                    echo "test"
                }
            }
    }


}
    
